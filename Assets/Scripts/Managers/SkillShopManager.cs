using UnityEngine;
using System.Linq;
using System.Collections.Generic;

public class SkillShopManager : MonoBehaviour
{
    [Header("Skills Pool")]
    public List<SkillData> allShopSkills; // –£—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Å–∫—ñ–ª–∏ –º–∞–≥–∞–∑–∏–Ω—É

    [Header("Player Panel")]
    public Transform playerSkillPanel; // –ø–∞–Ω–µ–ª—å –≤–Ω–∏–∑—É
    public GameObject skillUIPrefab;   // –ø—Ä–µ—Ñ–∞–± –æ–¥–Ω—ñ—î—ó –∫–Ω–æ–ø–∫–∏/—ñ–∫–æ–Ω–∫–∏ —Å–∫—ñ–ª–∞

    private int currentBet = 0;

    void Start()
    {
        // üîπ –ù–∞ —Å—Ç–∞—Ä—Ç—ñ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∂–µ –∫—É–ø–ª–µ–Ω—ñ —Å–∫—ñ–ª–∏
        foreach (SkillData skill in PlayerData.Instance.ownedSkills)
        {
            AddSkillToPanel(skill);
        }
    }

    // –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ—é Bet
    public void GiveSkillByBet(int coins)
    {
        if (coins <= 0)
        {
            Debug.Log("‚ùå –ù–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –º–æ–Ω–µ—Ç–∏");
            return;
        }

        currentBet = coins;
        ConfirmBet();
    }

    private void ConfirmBet()
    {
        int targetRarity = GetRarityByBet(currentBet);

        var raritySkills = allShopSkills.Where(s => s.rarity == targetRarity).ToList();
        if (raritySkills.Count == 0)
        {
            Debug.LogWarning($"‚ùå –ù–µ–º–∞—î —Å–∫—ñ–ª—ñ–≤ –∑ rarity {targetRarity}");
            return;
        }

        SkillData chosen = raritySkills[Random.Range(0, raritySkills.Count)];

        // –î–æ–¥–∞—î–º–æ –≤ PlayerData
        PlayerData.Instance.AddSkill(chosen);

        // –î–æ–¥–∞—î–º–æ –Ω–∞ –ø–∞–Ω–µ–ª—å
        AddSkillToPanel(chosen);

        Debug.Log($"‚úÖ –î–æ–¥–∞–Ω–æ —Å–∫—ñ–ª: {chosen.skillName}");

        currentBet = 0;
    }

    private int GetRarityByBet(int bet)
    {
        if (bet >= 100) return 3;  
        if (bet >= 50) return 2;   
        return 1;                  
    }

    private void AddSkillToPanel(SkillData skill)
    {
        GameObject skillGO = Instantiate(skillUIPrefab, playerSkillPanel);
        SkillUI ui = skillGO.GetComponent<SkillUI>();
        if (ui != null)
            ui.Setup(skill);
        else
            Debug.LogError("‚ùå –ù–∞ SkillUIPrefab –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç SkillUI!");
    }
}
