using UnityEngine;
using System.Linq;
using System.Collections.Generic;

public class SkillShopManager : MonoBehaviour
{
    [Header("Skills Pool")]
    public List<SkillData> allShopSkills; // –£—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Å–∫—ñ–ª–∏ –º–∞–≥–∞–∑–∏–Ω—É

    [Header("Player Panel")]
    public Transform playerSkillPanel; // –ø–∞–Ω–µ–ª—å –≤–Ω–∏–∑—É
    public GameObject skillUIPrefab;   // –ø—Ä–µ—Ñ–∞–± –æ–¥–Ω—ñ—î—ó –∫–Ω–æ–ø–∫–∏/—ñ–∫–æ–Ω–∫–∏ —Å–∫—ñ–ª–∞

    private int currentBet = 0;

    void Start()
    {
        // –ü–æ–∫–∞–∑—É—î–º–æ –≤–∂–µ –∫—É–ø–ª–µ–Ω—ñ —Å–∫—ñ–ª–∏
        foreach (SkillData skill in PlayerData.Instance.ownedSkills)
        {
            AddSkillToPanel(skill);
        }
    }

    public void GiveSkillByBet(int coins)
    {
        if (coins <= 0)
        {
            Debug.Log("‚ùå –ù–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –º–æ–Ω–µ—Ç–∏");
            return;
        }

        currentBet = coins;
        ConfirmBet();
    }


    private void ConfirmBet()
    {
        int targetRarity = GetRarityByBet(currentBet);

        // –ü—ñ–¥–±–∏—Ä–∞—î–º–æ —Å–∫—ñ–ª –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º fallback
        SkillData chosen = GetSkillWithFallback(targetRarity);

        if (chosen == null)
        {
            Debug.LogWarning("‚ùå –í –º–∞–≥–∞–∑–∏–Ω—ñ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–∫—ñ–ª—ñ–≤!");
            return;
        }

        // –î–æ–¥–∞—î–º–æ –≤ PlayerData
        PlayerData.Instance.AddSkill(chosen);

        // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Å–∫—ñ–ª –∑ –º–∞–≥–∞–∑–∏–Ω—É, —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞–≤—Å—è
        allShopSkills.Remove(chosen);

        // –î–æ–¥–∞—î–º–æ –Ω–∞ –ø–∞–Ω–µ–ª—å
        AddSkillToPanel(chosen);

        Debug.Log($"‚úÖ –î–æ–¥–∞–Ω–æ —Å–∫—ñ–ª: {chosen.skillName}");

        currentBet = 0;
    }

    // –ü—ñ–¥–±–∏—Ä–∞—î rarity –∑ fallback
    private SkillData GetSkillWithFallback(int startingRarity)
    {
        int rarity = startingRarity;

        // –û—Å–Ω–æ–≤–Ω–∏–π –ø–æ—à—É–∫: –≤—ñ–¥ –∑–∞–ø–∏—Ç–∞–Ω–æ–≥–æ –¥–æ 1
        while (rarity >= 1)
        {
            var available = allShopSkills
                .Where(s => s.rarity == rarity && !PlayerData.Instance.ownedSkills.Contains(s))
                .ToList();

            if (available.Count > 0)
                return available[Random.Range(0, available.Count)];

            rarity--;
        }

        // üí´ –†—ñ–¥–∫—ñ—Å–Ω–∏–π —à–∞–Ω—Å –Ω–∞ –∫—Ä–∞—â–∏–π —Å–∫—ñ–ª (2%)
        if (Random.value <= 0.02f)
        {
            int maxRarity = allShopSkills.Max(s => s.rarity);
            var betterSkills = allShopSkills
                .Where(s => s.rarity > startingRarity && !PlayerData.Instance.ownedSkills.Contains(s))
                .ToList();

            if (betterSkills.Count > 0)
            {
                Debug.Log("üéâ –í–∏–ø–∞–ª–∞ —Ä—ñ–¥–∫—ñ—Å–Ω–∞ —É–¥–∞—á–∞! –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∫—ñ–ª –≤–∏—â–æ—ó —è–∫–æ—Å—Ç—ñ");
                return betterSkills[Random.Range(0, betterSkills.Count)];
            }
        }

        return null; // –≤–∑–∞–≥–∞–ª—ñ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å
    }

    private int GetRarityByBet(int bet)
    {
        if (bet >= 100) return 4;
        if (bet >= 50) return 3;  
        if (bet >= 30) return 2;   
        return 1;                  
    }

    private void AddSkillToPanel(SkillData skill)
    {
        GameObject skillGO = Instantiate(skillUIPrefab, playerSkillPanel);
        SkillUI ui = skillGO.GetComponent<SkillUI>();
        if (ui != null)
            ui.Setup(skill);
        else
            Debug.LogError("‚ùå –ù–∞ SkillUIPrefab –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç SkillUI!");
    }
}
