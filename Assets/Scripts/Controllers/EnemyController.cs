using UnityEngine;

public class EnemyController : MonoBehaviour
{
    public float attackCooldown = 2f;
    private float cooldownTimer;

    public SkillData[] attackSkills; // –°—é–¥–∏ –ø—ñ–¥–∫–∏–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Å–∫—ñ–ª–∏ –≤–æ—Ä–æ–≥–∞
    public GameObject player;        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≤—Ä—É—á–Ω—É –∞–±–æ —à—É–∫–∞—î—Ç—å—Å—è

    private HealthSystem healthSystem;
    private bool isInBerserkMode = false;
    private float nextAttackMultiplier = 1f;
    private bool isDead = false;

    private void Start()
    {
        healthSystem = GetComponent<HealthSystem>();
        cooldownTimer = attackCooldown;

        if (player == null)
        {
            player = GameObject.FindWithTag("Player");
        }
            healthSystem.OnDeath += () =>
            {
            isDead = true;
            Debug.Log("‚ùå –í–æ—Ä–æ–≥ –º–µ—Ä—Ç–≤–∏–π. –ó—É–ø–∏–Ω—è—î –¥—ñ—ó.");
            };

        if (player != null && player.TryGetComponent(out HealthSystem playerHealth))
        {
            playerHealth.OnDeath += () =>
            {
                Debug.Log("üéØ –ì—Ä–∞–≤–µ—Ü—å –ø–æ–º–µ—Ä. –í–æ—Ä–æ–≥ –±—ñ–ª—å—à–µ –Ω–µ –∞—Ç–∞–∫—É—î.");
                player = null;
            };
        }
    }

    private void Update()
    {
        if (player == null) return;

        if (isDead || player == null) return;

        // üî• –ü–∞—Å–∏–≤–Ω–∏–π —Å–∫—ñ–ª ‚Äî BerserkMod (25% HP)
        if (!isInBerserkMode && healthSystem.currentHealth <= healthSystem.maxHealth * 0.25f)
        {
            ActivateBerserkMode();
        }

        cooldownTimer -= Time.deltaTime;
        if (cooldownTimer <= 0f)
        {
            TryAttack();
            cooldownTimer = attackCooldown;
        }
    }

    private void ActivateBerserkMode()
    {
        isInBerserkMode = true;
        nextAttackMultiplier = 3f;
        Debug.Log("‚ö†Ô∏è –í–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤—É–≤–∞–≤ BerserkMod! –£—Å—ñ –∞—Ç–∞–∫–∏ —Ç–µ–ø–µ—Ä x3 —É—Ä–æ–Ω!");
    }

    private void TryAttack()
    {
        SkillData selected = ChooseSkill();

        if (selected == null) return;

        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —à–∫–æ–¥–∏
        int damage = Mathf.RoundToInt(selected.power * selected.multiplier * nextAttackMultiplier);

        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Å–∫—ñ–ª—ñ–≤
        if (selected.skillName == "Freeze")
        {
            Debug.Log("‚ùÑÔ∏è Freeze –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! –ì—Ä–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º–∞—î 10 —à–∫–æ–¥–∏ —Ç–∞ –≤—Å—ñ —Å–∫—ñ–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ñ –Ω–∞ 2 —Å–µ–∫.");
            TryFreezePlayerSkills(2f); // üîÅ –¢–∏ –º–∞—î—à —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ü–µ–π –º–µ—Ç–æ–¥ —É SkillManager
        }
        else if (selected.skillName == "PowerfulAttack")
        {
            Debug.Log("üí• PowerfulAttack –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!");
        }

        Debug.Log($"–í–æ—Ä–æ–≥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î {selected.skillName} —ñ –±'—î –Ω–∞ {damage} (x{nextAttackMultiplier})");

        if (player.TryGetComponent(out IDamageable dmg))
        {
            dmg.TakeDamage(damage);
        }

        nextAttackMultiplier = 1f; // –°–∫–∏–¥–∞—î–º–æ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –∞—Ç–∞–∫–∏
    }

    private void TryFreezePlayerSkills(float duration)
    {
        SkillManager skillManager = FindObjectOfType<SkillManager>();
        if (skillManager != null)
        {
            skillManager.DisableAllSkills(duration);
        }
    }

    private SkillData ChooseSkill()
    {
        if (healthSystem == null || attackSkills.Length == 0)
            return null;

        // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç Berserk –∞—Ç–∞–∫–∏ –ø—Ä–∏ <50%
        if (healthSystem.currentHealth < healthSystem.maxHealth / 2)
        {
            foreach (var skill in attackSkills)
            {
                if (skill.skillName == "Berserk")
                {
                    return skill;
                }
            }
        }

        // –Ü–Ω–∞–∫—à–µ –≤–∏–ø–∞–¥–∫–æ–≤–∞ –∞—Ç–∞–∫–∞
        int index = Random.Range(0, attackSkills.Length);
        return attackSkills[index];
    }
}
